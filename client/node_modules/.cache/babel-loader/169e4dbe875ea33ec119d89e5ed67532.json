{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport { GET_ERRORS } from './types'; // Register user\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post(\"/api/users/register\", userData).then(function (res) {\n      return history.push('/login');\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Login -get user token\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    axios.post('/api/users/login', userData).then(function (res) {\n      // Save to localstorage\n      var token = res.data.token; // Set token to ls\n\n      localStorage.setItem('jwtToken', token); // Set token to auth header\n\n      setAuthToken(token); //  Decode token to get user data\n\n      var decoded = jwtdecode(token); // Set current user\n\n      dispatch(setCurrentUser(decoded));\n    }).catch(function (err) {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};","map":{"version":3,"sources":["/Users/sbratche/matcha/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","jwtdecode","setCurrentUser","SET_CURRENT_USER"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,UAAT,QAA2B,SAA3B,C,CAEA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC3DP,IAAAA,KAAK,CACFQ,IADH,CACQ,qBADR,EAC+BH,QAD/B,EAEGI,IAFH,CAEQ,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAAJ;AAAA,KAFX,EAGGC,KAHH,CAGS,UAAAC,GAAG;AAAA,aACRN,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEX,UADD;AAELY,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFjB,OAAD,CADA;AAAA,KAHZ;AASH,GAV2B;AAAA,CAArB,C,CAYP;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACb,QAAD;AAAA,SAAc,UAAAE,QAAQ,EAAI;AAC/CP,IAAAA,KAAK,CAACQ,IAAN,CAAW,kBAAX,EAA+BH,QAA/B,EACCI,IADD,CACM,UAAAC,GAAG,EAAI;AACT;AADS,UAEDS,KAFC,GAEST,GAAG,CAACO,IAFb,CAEDE,KAFC,EAGT;;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJS,CAKT;;AACAlB,MAAAA,YAAY,CAACkB,KAAD,CAAZ,CANS,CAOT;;AACA,UAAMG,OAAO,GAAGC,SAAS,CAACJ,KAAD,CAAzB,CARS,CAST;;AACAZ,MAAAA,QAAQ,CAACiB,cAAc,CAACF,OAAD,CAAf,CAAR;AACH,KAZD,EAaCV,KAbD,CAaO,UAAAC,GAAG,EAAI;AACVN,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEX,UADD;AAELY,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFjB,OAAD,CAAR;AAIH,KAlBD;AAmBH,GApBwB;AAAA,CAAlB,C,CAsBP;;AACA,OAAO,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,CAACF,OAAD,EAAa;AACvC,SAAO;AACHR,IAAAA,IAAI,EAAEW,gBADH;AAEHV,IAAAA,OAAO,EAAEO;AAFN,GAAP;AAIH,CALM","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\n\nimport { GET_ERRORS } from './types';\n\n// Register user\nexport const registerUser = (userData, history) => dispatch => {\n    axios\n      .post(\"/api/users/register\", userData)\n      .then(res => history.push('/login'))\n      .catch(err => \n        dispatch({\n            type: GET_ERRORS,\n            payload: err.response.data\n        })\n    );\n}\n\n// Login -get user token\nexport const loginUser = (userData) => dispatch => {\n    axios.post('/api/users/login', userData)\n    .then(res => {\n        // Save to localstorage\n        const { token } = res.data;\n        // Set token to ls\n        localStorage.setItem('jwtToken', token);\n        // Set token to auth header\n        setAuthToken(token);\n        //  Decode token to get user data\n        const decoded = jwtdecode(token);\n        // Set current user\n        dispatch(setCurrentUser(decoded));\n    })\n    .catch(err => {\n        dispatch({\n            type: GET_ERRORS,\n            payload: err.response.data\n        })\n    })\n}\n\n// Set logged in user\nexport const setCurrentUser = (decoded) => {\n    return {   \n        type: SET_CURRENT_USER,\n        payload: decoded\n    }\n}\n"]},"metadata":{},"sourceType":"module"}